@model CommentServiceModel
@inject ICommentService commentService

<div class="row-md-4 p-3">
    <div class="card mb-3">
        <div class="card-header comment-header fs-6">
            <em style="flex-grow: 1"> Date and time: <b>@Model.Date</b></em>
            <div id="js-buttons-@Model.Id" style="display: flex">
                @if (await this.commentService.HasAuthorWithIdAsync(Model.Id, User.Id()))
                {
                    <div class="mx-1" id="js-edit-@Model.Id">
                        <div class="d-grid gap-2">
                            <input type="submit" value="Edit" class="btn btn-xs btn-dark"
                                   asp-area="Admin" asp-controller="Comment" asp-action="Edit" asp-route-id="@Model.Id" />
                        </div>
                    </div>
                }
                @if (this.User.IsAdmin() || await this.commentService.HasAuthorWithIdAsync(Model.Id, User.Id()))
                {
                    <div class="mx-1" id="js-delete-@Model.Id">
                        <div class="d-grid gap-2">
                            <input type="submit" value="Delete" class="btn btn-xs btn-dark"
                                   onclick="return confirm('Are you sure you want to delete this comment?')"
                                   asp-area="Admin" asp-controller="Comment" asp-action="Delete" asp-route-id="@Model.Id" />
                        </div>
                    </div>
                }
            </div>
        </div>
        <div class="row g-0">
            <div class="col-6 col-lg-3">
                <div style="height: 100%; width:100%; background-image: url(@Model.ProjectImageUrl); background-position:center; background-repeat:no-repeat; background-size: cover;"></div>
            </div>
            <div class="col-6 col-lg-9">
                <div class="card-body">
                    <p id="js-content-@Model.Id"><em><b>"@Model.Content"</b></em></p>
                    <p class="text-"><em>- Author: @Model.FullName</em></p>
                    <p class="text-"><em>- Author email: @Model.Email</em></p>
                </div>
            </div>
        </div>
        <div class="card-footer">
            <em>Project: <b>@Model.Title</b></em>
        </div>
    </div>
</div>


<script>
    function getLinesCount(str, cols) {
        var linecount = 0;

        var lines = str.split("\n");
        for (let i = 0; i < lines.length; i++) {
            var line = lines[i];
            linecount += 1 + Math.floor(line.length / cols);
        }

        return linecount;
    };

    function onEditComment(event) {
        setTextAreaCols(event.target.id);
        var comment = event.target.value;
        var cols = event.target.cols;
        var lines = getLinesCount(comment, cols);

        event.target.rows = lines;
    }

    function setTextAreaCols(textAreaId) {
        var element = document.getElementById(textAreaId);
        console.log(element);
        console.log(textAreaId);
        var style = window.getComputedStyle(element, null).getPropertyValue('font-size');
        var fontSize = parseFloat(style) + "px";

        var canvas = document.createElement("canvas");
        var context = canvas.getContext("2d");
        context.font = fontSize + " system-ui";
        var symbolWidth = context.measureText("a").width;

        var cols = Math.floor(element.clientWidth / symbolWidth);

        console.log(cols);

        element.cols = cols;
    }

    $(`#js-edit-@Model.Id`).on('click', function () {
        var newContent = "";

        // get comment content
        var content = $(`#js-content-@Model.Id`).text();

        // define textarea html
        var textarea = `<textarea id="js-edit-comment-@Model.Id" class="edit-comment-input">${content}</textarea>`

        // change content to textarea html with value = comment content
        $(`#js-content-@Model.Id`).html(textarea)

        // calculate and set textarea columns count
        setTextAreaCols(`js-edit-comment-@Model.Id`);

        // add event listener on textarea input to calculate text area rows dynamically
        $(`#js-edit-comment-@Model.Id`).on('input', (ev) => {
            onEditComment(ev);
            newContent = ev.target.value;
            console.log(newContent);
        });

        // define apply button html
        var apply = `<div class="mx-1" id="js-apply-@Model.Id">
                                <div class="d-grid gap-2">
                                    <input type="submit" value="Apply" class="btn btn-xs btn-dark"/>
                                </div>
                             </div>`

        // remove "Edit" and "Delete" buttons and show "Apply" button
        $(`#js-buttons-@Model.Id`).html(apply);

        // set event handler on "Apply" button
        $(`#js-apply-@Model.Id`).on('click', () => {
            console.log("apply: ", newContent);
            $.get(`Admin/Comment/Edit/@Model.Id`, {
                Content: newContent,
                AuthorId: '@Model.AuthorId',
                ProjectId: @Model.ProjectId
                    }, () => { window.location.reload() });
        })
    });

    // set event handler on "Delete" button
    $(`#js-delete-@Model.Id`).on('click', () => {
        $.get(`Admin/Comment/Delete/@Model.Id`, () => {
            window.location.reload()
        });
    })
</script>

